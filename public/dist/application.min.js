"use strict";var ApplicationConfiguration=function(){var applicationModuleName="my_books",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","pascalprecht.translate"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("books"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("genres"),ApplicationConfiguration.registerModule("shelves"),ApplicationConfiguration.registerModule("users"),angular.module("books").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Books","books","dropdown","/books(/create)?"),Menus.addSubMenuItem("topbar","books","List Books","books")}]),angular.module("books").config(["$stateProvider",function($stateProvider){$stateProvider.state("listBooks",{url:"/books",templateUrl:"modules/books/views/list-books.client.view.html"})}]);var bookApp=angular.module("books");bookApp.controller("BooksController",["$scope","$timeout","$stateParams","$location","$modal","$log","$translate","$filter","Authentication","Shelves","Genres","BooksAPI",function($scope,$timeout,$stateParams,$location,$modal,$log,$translate,$filter,Authentication,Shelves,Genres,BooksAPI){$scope.authentication=Authentication,$scope.shelves=Shelves.query(),$scope.genres=Genres.query(),$scope.data={shelves:[],alert:null,masterBooks:[],flattenBooks:[],filteredBooks:[],search:{books:[],hide:!0,start:!1}},$scope.pagination={currentPage:1,maxSize:5,itemsPerPage:25},$scope.filter={itemsPerPage:$scope.pagination.itemsPerPage},$scope.$watchCollection("filter",function(newVal,oldVal){newVal!==oldVal&&($scope.pagination.currentPage=1,$scope.pagination.itemsPerPage=$scope.filter.itemsPerPage,$scope.data.flattenBooks=$filter("customFilter")($scope.data.masterBooks,newVal),$scope.pagination.totalItems=$scope.data.flattenBooks.length,$scope.pageChanged())}),$scope.pageChanged=function(){var begin=($scope.pagination.currentPage-1)*$scope.pagination.itemsPerPage,end=begin+$scope.pagination.itemsPerPage,firstOnPage=1+begin,lastOnPage=firstOnPage+$scope.pagination.itemsPerPage-1;lastOnPage>$scope.data.flattenBooks.length&&(lastOnPage=$scope.data.flattenBooks.length),$scope.pagination.firstOnPage=firstOnPage,$scope.pagination.lastOnPage=lastOnPage,$scope.data.filteredBooks=$scope.data.flattenBooks.slice(begin,end)},$scope.create=function(data,skipAlert){Shelves.get({shelfId:data.shelf._id}).$promise.then(function(shelf){var book={isbn:data.isbn,title:data.title,author:data.author,publishedDate:data.publishedDate,description:data.description,pageCount:data.pageCount,thumbnail:data.thumbnail,coverColour:data.coverColour,fontColour:data.fontColour,genre:data.genre[0]._id};shelf.$createBook(book,function(){$scope.find(),skipAlert||$translate("Book has been created.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)})},function(errorResponse){$scope.error=errorResponse.data.message})})},$scope.remove=function(data,skipAlert){Shelves.get({shelfId:data.shelf._id}).$promise.then(function(shelf){shelf.$deleteBook({bookId:data._id},function(){$scope.find(),skipAlert||$translate("Book has been deleted.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)})},function(errorResponse){$scope.error=errorResponse.data.message})})},$scope.update=function(data){Shelves.get({shelfId:data.shelf._id}).$promise.then(function(shelf){Shelves.byBook({bookId:data._id}).$promise.then(function(currentShelf){if(shelf._id!==currentShelf[0]._id){var currentData={};currentData=angular.copy(data),currentData.shelf=currentShelf[0],$scope.remove(currentData,!0),$scope.create(data,!0),$translate("Book has been updated.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)})}else shelf.$updateBook({bookId:data._id,isbn:data.isbn,title:data.title,author:data.author,publishedDate:data.publishedDate,description:data.description,pageCount:data.pageCount,thumbnail:data.thumbnail,coverColour:data.coverColour,fontColour:data.fontColour,genre:data.genre[0]._id},function(){$scope.find(),$translate("Book has been updated.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)})},function(errorResponse){$scope.error=errorResponse.data.message})})})},$scope.find=function(){var newBook={};Shelves.query().$promise.then(function(shelves){$scope.data.masterBooks=[],shelves.forEach(function(shelf){shelf.books.length>0&&shelf.books.forEach(function(book){newBook={shelf:{_id:shelf._id,name:shelf.name}},angular.extend(newBook,book),$scope.data.masterBooks.push(newBook)}),$scope.data.flattenBooks=$filter("customFilter")($scope.data.masterBooks,$scope.filter),$scope.pagination.totalItems=$scope.data.flattenBooks.length}),$scope.pageChanged()})},$scope.addShelf=function(){Shelves.save({},{name:$scope.formData.newshelf},function(){$scope.shelves=Shelves.query(function(shelf){$scope.formData.shelf=shelf[0]})},function(errorResponse){$scope.errorResponse=errorResponse.data.message})},$scope.addGenre=function(){Genres.save({},{name:$scope.formData.newgenre},function(){$scope.genres=Genres.query(function(genres){$scope.formData.genre[0]=genres[0]})},function(errorResponse){$scope.errorResponse=errorResponse.data.message})},$scope.modalUpdate=function(size,selectedBook){var modalInstance=$modal.open({templateUrl:"modules/books/views/edit-book.client.view.html",controller:["$scope","$modalInstance","book",function($scope,$modalInstance,book){Shelves.byBook({bookId:book._id},function(shelf){$scope.formData=book,$scope.formData.shelf=shelf[0]}),$scope.ok=function(){this.form.editBookForm.$valid?$modalInstance.close($scope.formData):$translate("Please fill or required fields").then(function(requiredFields){$scope.error=requiredFields})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{book:function(){return selectedBook}}});modalInstance.result.then(function(formData){$scope.update(formData)},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.modalDelete=function(size,selectedBook){var modalInstance=$modal.open({templateUrl:"modules/books/views/delete-book.client.view.html",controller:["$scope","$modalInstance","book",function($scope,$modalInstance,book){$scope.formData=book,$scope.ok=function(){$modalInstance.close($scope.formData)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{book:function(){return selectedBook}}});modalInstance.result.then(function(formData){$scope.remove(formData)},function(){})},$scope.modalCreate=function(size){var modalInstance=$modal.open({templateUrl:"modules/books/views/create-book.client.view.html",controller:["$scope","$modalInstance",function($scope,$modalInstance){$scope.formData={},$scope.formData.fontColour="#FFFFFF",$scope.formData.coverColour="#000000",$scope.ok=function(){this.form.createBookForm.$valid?$modalInstance.close($scope.formData):$translate("Please fill or required fields").then(function(requiredFields){$scope.error=requiredFields})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size});modalInstance.result.then(function(formData){$scope.create(formData)},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.executeSearch=function(subQuery){$scope.data.search.start=!0,BooksAPI.searchBooks(subQuery+$scope.formData.isbn,function(error,data){error||($scope.data.search.hide=!1,$scope.data.search.books=data.items?data.items:[]),$scope.data.search.start=!1})},$scope.closeSearch=function(){$scope.data.search.hide=!0,$scope.data.search.books=[]},$scope.loadBook=function(book){var bookInfo=book.volumeInfo;$scope.formData.title=bookInfo.title||"",$scope.formData.author=bookInfo.authors?bookInfo.authors.join(", "):"",$scope.formData.pageCount=bookInfo.pageCount||0,$scope.formData.publishedDate=bookInfo.publishedDate||"",$scope.formData.thumbnail=bookInfo.imageLinks?bookInfo.imageLinks.smallThumbnail:""},$scope.format=function(field){"isbn"===field&&($scope.formData[field]=$scope.formData[field].replace(/-/g,""))},$scope.find()}]),bookApp.filter("customFilter",function(){return function(items,filter){var query,title,author,skip,filteredItems=[];return filter?(items.forEach(function(item){skip=!1,title=item.title.toUpperCase(),author=item.author.toUpperCase(),filter.genre&&filter.genre.name&&item.genre[0].name!==filter.genre.name&&(skip=!0),filter.shelf&&filter.shelf.name&&item.shelf.name!==filter.shelf.name&&(skip=!0),filter.query&&(query=filter.query.toUpperCase(),~title.indexOf(query)||~author.indexOf(query)||(skip=!0)),skip||filteredItems.push(item)}),filteredItems):items}}),angular.module("books").factory("BooksAPI",["$http",function($http){return{searchBooks:function(query,callback){$http.get("https://www.googleapis.com/books/v1/volumes",{params:{q:query}}).success(function(data){callback(null,data)}).error(function(e){callback(e)})}}}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("about",{url:"/about",templateUrl:"modules/core/views/about.client.view.html"}).state("contact",{url:"/contact",templateUrl:"modules/core/views/contact.client.view.html"}).state("faq",{url:"/faq",templateUrl:"modules/core/views/faq.client.view.html"})}]),angular.module("core").config(["$translateProvider",function($translateProvider){$translateProvider.useStaticFilesLoader({prefix:"i18n/locale-",suffix:".json"}),$translateProvider.preferredLanguage("pl"),$translateProvider.fallbackLanguage("en"),$translateProvider.useCookieStorage()}]),angular.module("core").controller("HeaderController",["$scope","$translate","Authentication","Menus",function($scope,$translate,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.changeLanguage=function(languageCode){$translate.use(languageCode)}}]),angular.module("core").controller("HomeController",["$scope","Authentication","Shelves",function($scope,Authentication,Shelves){$scope.authentication=Authentication,Shelves.query().$promise.then(function(shelves){$scope.shelves=shelves,$scope.flattenBooks=[];var booksIndex=0;angular.forEach(shelves,function(shelf){shelf.active&&angular.forEach(shelf.books,function(book,i){$scope.flattenBooks.push({title:book.title,author:book.author,isbn:book.isbn,fontColour:book.fontColour,coverColour:book.coverColour,pageCount:book.pageCount,sizeHeight:"25px",sizeWidth:randomIntFromInterval(110,190)+"px",publishedDate:book.publishedDate,description:book.description,shelfName:shelf.name,bookEnd:!1}),shelf.books.length-1===i&&$scope.flattenBooks.push({bookEnd:!0}),booksIndex++})}),0===booksIndex&&$scope.flattenBooks.push({bookPlaceholder:!0})});var randomIntFromInterval=function(min,max){return Math.floor(Math.random()*(max-min+1)+min)}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("genres").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGenres",{url:"/genres",templateUrl:"modules/genres/views/list-genres.client.view.html"})}]),angular.module("genres").controller("GenresController",["$scope","$stateParams","$location","$translate","$timeout","$modal","$log","Authentication","Genres",function($scope,$stateParams,$location,$translate,$timeout,$modal,$log,Authentication,Genres){$scope.authentication=Authentication,$scope.data={genres:[],alert:null,size:{}},$scope.create=function(data){var genre=new Genres({name:data.name});genre.$save(function(){$scope.find(),$translate("Book genre has been created.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)})},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(genre){if(genre){genre.$remove(),$translate("Book genre has been deleted.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)});for(var i in $scope.data.genres)$scope.data.genres[i]===genre&&$scope.data.genres.splice(i,1)}},$scope.update=function(updatedGenre){var shelf=updatedGenre;shelf.$update(function(){$scope.find(),$translate("Shelf has been updated.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)})},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findOne=function(){$scope.genre=Genres.get({genreId:$stateParams.genreId})},$scope.modalCreate=function(size){var modalInstance=$modal.open({templateUrl:"modules/genres/views/create-genre.client.view.html",controller:["$scope","$modalInstance",function($scope,$modalInstance){$scope.formData={},$scope.ok=function(){this.form.createGenreForm.$valid?$modalInstance.close($scope.formData):$translate("Please fill or required fields").then(function(requiredFields){$scope.error=requiredFields})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size});modalInstance.result.then(function(formData){$scope.create(formData)},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.modalUpdate=function(size,selectedGenre){var modalInstance=$modal.open({templateUrl:"modules/genres/views/edit-genre.client.view.html",controller:["$scope","$modalInstance","genre",function($scope,$modalInstance,genre){$scope.formData=genre,$scope.ok=function(){this.form.updateGenreForm.$valid?$modalInstance.close($scope.formData):$translate("Please fill or required fields").then(function(requiredFields){$scope.error=requiredFields})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{genre:function(){return selectedGenre}}});modalInstance.result.then(function(formData){$scope.update(formData)},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.modalDelete=function(size,selectedGenre){var modalInstance=$modal.open({templateUrl:"modules/genres/views/delete-genre.client.view.html",controller:["$scope","$modalInstance","genre",function($scope,$modalInstance,genre){$scope.formData=genre,$scope.ok=function(){$modalInstance.close($scope.formData)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{genre:function(){return selectedGenre}}});modalInstance.result.then(function(formData){$scope.remove(formData)},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.find=function(){Genres.query().$promise.then(function(genres){$scope.data.genres=genres,Genres.getSize().$promise.then(function(sizes){$scope.data.sizes=sizes})})},$scope.find()}]),angular.module("genres").factory("Genres",["$resource",function($resource){return $resource("genres/:genreId",{genreId:"@_id"},{update:{method:"PUT"},getSize:{url:"/genres/size",method:"GET"}})}]),angular.module("shelves").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Shelves","shelves","dropdown","/shelves(/create)?"),Menus.addSubMenuItem("topbar","shelves","List Shelves","shelves")}]),angular.module("shelves").config(["$stateProvider",function($stateProvider){$stateProvider.state("listShelves",{url:"/shelves",templateUrl:"modules/shelves/views/list-shelves.client.view.html"})}]),angular.module("shelves").controller("ShelvesController",["$scope","$timeout","$stateParams","$location","$modal","$log","$translate","Authentication","Shelves",function($scope,$timeout,$stateParams,$location,$modal,$log,$translate,Authentication,Shelves){$scope.authentication=Authentication,$scope.data={shelves:[],alert:null},$scope.create=function(data){var shelf=new Shelves({name:data.name});shelf.$save(function(){$scope.find(),$translate("Shelf has been created.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)})},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(shelf){if(shelf){var books=shelf.books;books&&$scope.moveToDefault(books),shelf.$remove(),$translate("Shelf has been deleted.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)});for(var i in $scope.data.shelves)$scope.data.shelves[i]===shelf&&$scope.data.shelves.splice(i,1)}},$scope.moveToDefault=function(books){Shelves.default().$promise.then(function(shelf){var defaultBooks=shelf.books;defaultBooks=books.concat(defaultBooks),shelf.books=defaultBooks,$scope.update(shelf)})},$scope.update=function(updatedShelf){var shelf=updatedShelf;shelf.$update(function(){$scope.find(),$translate("Shelf has been updated.").then(function(alert){$scope.data.alert=alert,$timeout(function(){$scope.data.alert=null},3e3)})},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.data.shelves=Shelves.query()},$scope.findOne=function(){$scope.shelf=Shelves.get({shelfId:$stateParams.shelfId})},$scope.modalCreate=function(size){var modalInstance=$modal.open({templateUrl:"modules/shelves/views/create-shelf.client.view.html",controller:["$scope","$modalInstance",function($scope,$modalInstance){$scope.formData={},$scope.ok=function(){this.form.createShelfForm.$valid?$modalInstance.close($scope.formData):$translate("Please fill or required fields").then(function(requiredFields){$scope.error=requiredFields})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size});modalInstance.result.then(function(formData){$scope.create(formData)},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.modalUpdate=function(size,selectedShelf){var modalInstance=$modal.open({templateUrl:"modules/shelves/views/edit-shelf.client.view.html",controller:["$scope","$modalInstance","shelf",function($scope,$modalInstance,shelf){$scope.formData=shelf,$scope.ok=function(){this.form.updateShelfForm.$valid?$modalInstance.close($scope.formData):$translate("Please fill or required fields").then(function(requiredFields){$scope.error=requiredFields})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{shelf:function(){return selectedShelf}}});modalInstance.result.then(function(formData){$scope.update(formData)},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.modalDelete=function(size,selectedShelf){var modalInstance=$modal.open({templateUrl:"modules/shelves/views/delete-shelf.client.view.html",controller:["$scope","$modalInstance","shelf",function($scope,$modalInstance,shelf){$scope.formData=shelf,$scope.ok=function(){$modalInstance.close($scope.formData)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{shelf:function(){return selectedShelf}}});modalInstance.result.then(function(formData){$scope.remove(formData)},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.find()}]),angular.module("shelves").factory("Shelves",["$resource",function($resource){return $resource("shelves/:shelfId",{shelfId:"@_id"},{update:{method:"PUT"},"default":{url:"/shelves/default",method:"GET"},byBook:{url:"/shelves/book/:bookId",method:"GET",isArray:!0},createBook:{url:"/shelves/:shelfId/books",params:{shelfId:"@_id"},method:"PUT"},updateBook:{url:"/shelves/:shelfId/books/:bookId",params:{shelfId:"@_id",bookId:"@bookId"},method:"PUT"},deleteBook:{url:"/shelves/:shelfId/books/:bookId",params:{shelfId:"@_id",bookId:"@bookId"},method:"DELETE"},readBooks:{url:"/shelves/books",method:"GET",isArray:!0}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profiles",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);